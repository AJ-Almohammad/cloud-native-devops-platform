name: Multi-Everything DevOps CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_PREFIX: ${{ github.repository }}

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [content-api, user-service, analytics-service, notification-service, cron-scheduler]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js (for analytics-service)
      if: matrix.service == 'analytics-service'
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Python (for user-service, cron-scheduler)
      if: matrix.service == 'user-service' || matrix.service == 'cron-scheduler'
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Run service tests
      run: |
        cd services/${{ matrix.service }}
        if [ -f "package.json" ]; then
          npm ci
          npm test
        elif [ -f "requirements.txt" ]; then
          pip install -r requirements.txt
          python -m pytest || echo "No tests found"
        elif [ -f "composer.json" ]; then
          echo "PHP service - skipping tests for now"
        else
          echo "No test setup found"
        fi

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Build and push Docker images
      run: |
        services=("content-api" "user-service" "analytics-service" "notification-service" "cron-scheduler")
        for service in "${services[@]}"; do
          echo "Building $service..."
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/$service:latest ./services/$service
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_PREFIX }}/$service:latest
        done

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-central-1

    - name: Deploy to EKS staging
      run: |
        # Apply Kubernetes manifests
        kubectl apply -f kubernetes/namespace.yaml
        kubectl apply -f kubernetes/secrets.yaml
        kubectl apply -f kubernetes/applications/
        echo "Deployment to staging completed"